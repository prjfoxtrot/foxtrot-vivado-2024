#!/usr/bin/env tclsh
# tool_options.tcl
# ---------------------------------------------------------------------------
# Description : Configure global synthesis/implementation options for a Vivado
#               project generated by Foxtrot.
#
# Usage       :
#   vivado -mode batch -source tool_options.tcl -tclargs \
#       project_name=<name>
# ---------------------------------------------------------------------------

proc abort {msg} {
    puts stderr $msg
    exit 1
}
proc parse_kv_pairs {argv} {
    foreach arg $argv {
        if {[regexp {([^=]+)=(.*)} $arg -> k v]} { set ::$k $v }
    }
}

parse_kv_pairs $argv
if {![info exists project_name] || $project_name eq ""} { abort "ERROR: project_name is required." }

set project_dir  [file join [pwd] vivado_project]
set project_file [file join $project_dir "${project_name}.xpr"]
if {![file exists $project_file]} { abort "ERROR: project file not found:\n  $project_file" }
open_project $project_file

set_param messaging.defaultLimit 2000000
set include_path [pwd]
set_property INCLUDE_DIRS   $include_path               [current_fileset]
set_property verilog_define "INCLUDE_DIR=$include_path" [current_fileset]
puts "Added include path $include_path"

set synth_run [get_runs synth_1]
if {[llength $synth_run]} {
    set_property STEPS.SYNTH_DESIGN.ARGS.FLATTEN_HIERARCHY         none  $synth_run
    set_property STEPS.SYNTH_DESIGN.ARGS.KEEP_EQUIVALENT_REGISTERS true  $synth_run
    set_property STEPS.SYNTH_DESIGN.ARGS.NO_LC                     true  $synth_run
    set_property STEPS.SYNTH_DESIGN.ARGS.NO_SRLEXTRACT             true  $synth_run
    set_property STEPS.SYNTH_DESIGN.ARGS.SHREG_MIN_SIZE            5     $synth_run
    set_property STEPS.SYNTH_DESIGN.ARGS.FSM_EXTRACTION            off    $synth_run
    set_property STEPS.SYNTH_DESIGN.ARGS.RESOURCE_SHARING          off    $synth_run
    set_property STEPS.SYNTH_DESIGN.ARGS.CONTROL_SET_OPT_THRESHOLD 0      $synth_run
    puts "Configured synthesis options on run synth_1"
}

set impl_run [get_runs impl_1]
if {[llength $impl_run]} {
    set_property STEPS.OPT_DESIGN.IS_ENABLED                  false $impl_run
    set_property STEPS.POWER_OPT_DESIGN.IS_ENABLED            false $impl_run
    set_property STEPS.POST_PLACE_POWER_OPT_DESIGN.IS_ENABLED false $impl_run
    set_property STEPS.PHYS_OPT_DESIGN.IS_ENABLED             false $impl_run
    set_property STEPS.PLACE_DESIGN.ARGS.DIRECTIVE            Default $impl_run
    set_property STEPS.ROUTE_DESIGN.ARGS.DIRECTIVE            Default $impl_run
    puts "Configured implementation options on run impl_1"
}

catch { set_param general.maxThreads 4 }

if {[llength $impl_run]} {
    set rpt_tcl [file join [pwd] report_route_status.tcl]
    set fp [open $rpt_tcl w]
    puts $fp {report_route_status -file [file join [pwd] route_status.rpt]}
    close $fp
    puts "Created route-status hook $rpt_tcl"
}

close_project
puts "tool_options.tcl finished OK"
